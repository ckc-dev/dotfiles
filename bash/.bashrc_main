# If not running interactively, don't do anything.
[[ $- != *i* ]] && return

# Initialize paths.
DOTFILES_DIR="$HOME/.dotfiles"
BASH_SCRIPTS_DIR="$DOTFILES_DIR/bash"

# Initialize color variables.
COLOR_BOLD="\033[1m"                # Bold
COLOR_BOLD_RESET="\033[21m"         # Reset bold
COLOR_ITALIC="\033[3m"              # Italic
COLOR_ITALIC_RESET="\033[23m"       # Reset italic
COLOR_REVERSE="\033[7m"             # Reverse
COLOR_REVERSE_RESET="\033[27m"      # Reset reverse
COLOR_UNDERLINE="\033[4m"           # Underline
COLOR_UNDERLINE_RESET="\033[24m"    # Reset underline
COLOR_RESET="\033[0m"               # Reset all attributes
COLOR0="\033[30m"                   # Black
COLOR1="\033[31m"                   # Red
COLOR2="\033[32m"                   # Green
COLOR3="\033[33m"                   # Yellow
COLOR4="\033[34m"                   # Blue
COLOR5="\033[35m"                   # Purple
COLOR6="\033[36m"                   # Cyan
COLOR7="\033[37m"                   # Light gray

# Load Git prompt script. (https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh)
source "$BASH_SCRIPTS_DIR/git-prompt.sh"

# Load Git completion script. (source: https://github.com/git/git/blob/master/contrib/completion/git-completion.bash)
source "$BASH_SCRIPTS_DIR/git-completion.bash"

# Show unstaged (*) and staged (+) changes next to branch names in Git repositories.
export GIT_PS1_SHOWDIRTYSTATE=1

# Fix some issues with GPG2.
export GPG_TTY=$(tty)

# Prompt.
PS1="[\u@${COLOR_BOLD}\h${COLOR_BOLD_RESET} ${COLOR4}\W${COLOR_RESET}] ${COLOR5}"'$(__git_ps1 "(%s)")'"${COLOR_RESET}$ "

# Automatically `cd` into directories.
shopt -s autocd

# Automatically fix minor misspellings in directory names.
shopt -s cdspell
shopt -s direxpand
shopt -s dirspell

# Avoid duplicate entries in history.
export HISTCONTROL=ignoredups

# Control .dotfiles Git repository using an alias.
alias dotfiles="/usr/bin/git --git-dir=$DOTFILES_DIR/.git/ --work-tree=$DOTFILES_DIR/"

# Display colors with "ls" command.
alias ls="ls --color=auto"

# Better file listing.
alias ll="ls -plAsh"

# Better file copyping.
alias cp="cp -vir"

# Better file moving.
alias mv="mv -vi"

# Better file removal.
alias rm="rm -rf"

# Better directory creation.
alias mkdir="mkdir -pv"

# Create and load Python virtual environments using aliases.
alias ve="python -m venv .venv"
alias va="source .venv/bin/activate"

# Remove unused packages.
alias pacremove="pacman -Qtdq | sudo pacman -Rns -"

# List explicitly installed packages that are not dependencies.
paclist() {
    PACKAGE_LIST_NATIVE=$(comm -23 <(pacman -Qqe | sort) <(pacman -Qqdt | sort))
    PACKAGE_COUNT_NATIVE=$(echo "$PACKAGE_LIST_NATIVE" | wc -l)

    PACKAGE_LIST_AUR=$(pacman -Qm)
    PACKAGE_COUNT_AUR=$(echo "$PACKAGE_LIST_AUR" | wc -l)

    PACKAGE_COUNT_TOTAL=$((PACKAGE_COUNT_NATIVE + PACKAGE_COUNT_AUR))

    printf "${COLOR_BOLD}${COLOR6}NATIVE: ${PACKAGE_COUNT_NATIVE}${COLOR_RESET}\n${PACKAGE_LIST_NATIVE}\n\n"
    printf "${COLOR_BOLD}${COLOR4}AUR: ${PACKAGE_COUNT_AUR}${COLOR_RESET}\n${PACKAGE_LIST_AUR}\n\n"
    printf "${COLOR_BOLD}${COLOR2}TOTAL: ${PACKAGE_COUNT_TOTAL}${COLOR_RESET}\n"
}

# Safely unmount drives.
unmount() {
    if [ -z "$1" ]; then
        echo "Error: Missing argument. Please provide a device or mount point to unmount."
        return 1
    fi

    device=$(realpath -m "$1")

    if ! mount | grep -q " on $device "; then
        echo "Error: Device or mount point '$device' is not mounted."
        return 1
    fi

    printf "Unmounting '$device'...\n"
    sudo umount "$device"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to unmount '$device'."
        return 1
    fi

    printf "Running sync routine...\n"
    sync

    printf "Stopping '$device'...\n"
    sudo hdparm -Y "$device"

    printf "Done. '$device' can be safely removed.\n"
}

# Open and mount LUKS encrypted drives.
open_luks_drive() {
    local device="$1"
    local mapper_name="$2"
    local mount_point="$3"

    if [ -z "$device" ] || [ -z "$mapper_name" ] || [ -z "$mount_point" ]; then
        echo "Usage: open_luks_drive <device> <mapper_name> <mount_point>"
        return 1
    fi

    sudo cryptsetup open "$device" "$mapper_name"

    # Create the mount point directory if it doesn't exist.
    [ ! -d "$mount_point" ] && sudo mkdir -p "$mount_point"

    sudo mount /dev/mapper/"$mapper_name" "$mount_point"

    echo "LUKS encrypted drive mounted at $mount_point"
}

# Close and unmount LUKS encrypted drives.
close_luks_drive() {
    local mapper_name="$1"
    local mount_point="$2"

    if [ -z "$mapper_name" ] || [ -z "$mount_point" ]; then
        echo "Usage: close_luks_drive <mapper_name> <mount_point>"
        return 1
    fi

    unmount "$mount_point"

    sudo cryptsetup close "$mapper_name"

    echo "LUKS encrypted drive unmounted and closed."
}

# Add useful directories to PATH.
export PATH=$PATH:~/.local/bin/
