# If not running interactively, don't do anything.
[[ $- != *i* ]] && return

# Initialize paths.
DOTFILES_DIR="$HOME/.dotfiles"
BASH_SCRIPTS_DIR="$DOTFILES_DIR/bash"

# Initialize color variables.
COLOR_BOLD="\033[1m"                # Bold
COLOR_BOLD_RESET="\033[21m"         # Reset bold
COLOR_ITALIC="\033[3m"              # Italic
COLOR_ITALIC_RESET="\033[23m"       # Reset italic
COLOR_REVERSE="\033[7m"             # Reverse
COLOR_REVERSE_RESET="\033[27m"      # Reset reverse
COLOR_UNDERLINE="\033[4m"           # Underline
COLOR_UNDERLINE_RESET="\033[24m"    # Reset underline
COLOR_RESET="\033[0m"               # Reset all attributes
COLOR0="\033[30m"                   # Black
COLOR1="\033[31m"                   # Red
COLOR2="\033[32m"                   # Green
COLOR3="\033[33m"                   # Yellow
COLOR4="\033[34m"                   # Blue
COLOR5="\033[35m"                   # Purple
COLOR6="\033[36m"                   # Cyan
COLOR7="\033[37m"                   # Light gray

# Load Git prompt and completion scripts.
source "$BASH_SCRIPTS_DIR/git-prompt.sh"
source "$BASH_SCRIPTS_DIR/git-completion.bash"

# Show unstaged (*) and staged (+) changes next to branch names in Git repositories.
export GIT_PS1_SHOWDIRTYSTATE=1

# Fix some issues with GPG2.
export GPG_TTY=$(tty)

# Prompt.
PS1="[\u@${COLOR_BOLD}\h${COLOR_BOLD_RESET} ${COLOR4}\W${COLOR_RESET}] ${COLOR5}"'$(__git_ps1 "(%s)")'"${COLOR_RESET}$ "

# Automatically `cd` into directories.
shopt -s autocd

# Automatically fix minor misspellings in directory names.
shopt -s cdspell
shopt -s direxpand
shopt -s dirspell

# Avoid duplicate entries in history.
export HISTCONTROL=ignoredups

# Aliases for common commands.
alias dotfiles="/usr/bin/git --git-dir=$DOTFILES_DIR/.git/ --work-tree=$DOTFILES_DIR/" # Control .dotfiles Git repository.
alias ls="ls --color=auto" # Display colors with "ls" command.
alias ll="ls -plAsh" # Better file listing.
alias cp="cp -vir" # Better file copying.
alias mv="mv -vi" # Better file moving.
alias rm="rm -rf" # Better file removal.
alias mkdir="mkdir -pv" # Better directory creation.
alias ve="python -m venv .venv" # Create Python virtual environments.
alias va="source .venv/bin/activate" # Load Python virtual environments.
alias pacremove="pacman -Qtdq | sudo pacman -Rns -" # Remove unused packages

# Function to list explicitly installed packages that are not dependencies.
paclist() {
    local package_list_native=$(comm -23 <(pacman -Qqe | sort) <(pacman -Qqdt | sort))
    local package_count_native=$(echo "$package_list_native" | wc -l)

    local package_list_aur=$(pacman -Qm)
    local package_count_aur=$(echo "$package_list_aur" | wc -l)

    local package_count_total=$((package_count_native + package_count_aur))

    printf "${COLOR_BOLD}${COLOR6}NATIVE: ${package_count_native}${COLOR_RESET}\n${package_list_native}\n\n"
    printf "${COLOR_BOLD}${COLOR4}AUR: ${package_count_aur}${COLOR_RESET}\n${package_list_aur}\n\n"
    printf "${COLOR_BOLD}${COLOR2}TOTAL: ${package_count_total}${COLOR_RESET}\n"
}

# Function to safely unmount drives.
unmount() {
    if [ -z "$1" ]; then
        echo "Error: Missing argument. Please provide a device or mount point to unmount."
        return 1
    fi

    local input=$(realpath -m "$1")

    # If argument is a mount point:
    if mount | grep -q " on $input "; then
        local mount_point="$input"
        local device=$(mount | grep " on $mount_point " | awk '{print $1}')
    # If argument is a device:
    elif mount | grep -q "^$input on "; then
        local device="$input"
        local mount_point=$(mount | grep "^$device on " | awk '{print $3}')
    else
        echo "Error: Device or mount point '$input' is not mounted."
        return 1
    fi

    printf "Unmounting '$mount_point'...\n"
    sudo umount "$mount_point"

    if [ $? -ne 0 ]; then
        echo "Error: Failed to unmount '$mount_point'."
        return 1
    fi

    printf "Running sync routine...\n"
    sync

    printf "Stopping '$device'...\n"
    sudo hdparm -Y "$device"

    printf "Done. '$device' can be safely removed.\n"
}

# Function to open and mount LUKS encrypted drives.
open_luks_drive() {
    local device="$1"
    local mapper_name="$2"
    local mount_point="$3"

    if [ -z "$device" ] || [ -z "$mapper_name" ] || [ -z "$mount_point" ]; then
        echo "Usage: open_luks_drive <device> <mapper_name> <mount_point>"
        return 1
    fi

    sudo cryptsetup open "$device" "$mapper_name"

    # Create the mount point directory if it doesn't exist.
    [ ! -d "$mount_point" ] && sudo mkdir -p "$mount_point"

    sudo mount /dev/mapper/"$mapper_name" "$mount_point"

    echo "LUKS encrypted drive mounted at $mount_point"
}

# Function to close and unmount LUKS encrypted drives.
close_luks_drive() {
    local mapper_name="$1"
    local mount_point="$2"

    if [ -z "$mapper_name" ] || [ -z "$mount_point" ]; then
        echo "Usage: close_luks_drive <mapper_name> <mount_point>"
        return 1
    fi

    unmount "$mount_point"

    sudo cryptsetup close "$mapper_name"

    echo "LUKS encrypted drive unmounted and closed."
}

# Add useful directories to PATH.
export PATH=$PATH:~/.local/bin/
